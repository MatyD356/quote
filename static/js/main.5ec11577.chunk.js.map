{"version":3,"sources":["components/Container.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","handleClick","randNum","Math","floor","random","state","jsonData","quotes","length","setState","quote","author","loading","fetch","response","json","data","this","id","className","target","rel","href","onClick","React","Component","App","script","document","createElement","async","src","body","appendChild","QuoteScript","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RA0CeA,E,YAvCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAeVC,YAAc,WACV,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,UAAY,EAAI,EAAKC,MAAMC,SAASC,OAAOC,QAAU,EAAKH,MAAMC,SAASC,OAAOC,QAC9G,EAAKC,SAAS,CACVC,MAAO,EAAKL,MAAMC,SAASC,OAAON,GAASS,MAC3CC,OAAQ,EAAKN,MAAMC,SAASC,OAAON,GAASU,OAC5CC,SAAS,KAnBb,EAAKP,MAAQ,CACTK,MAAO,0CACPC,OAAQ,aACRL,SAAU,MALC,E,yMASH,2I,SACWO,MADX,4I,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKR,SAAS,CACVH,SAAUU,I,qIAad,OACI,yBAAKE,GAAG,YAAYC,UAAU,aAC1B,yBAAKA,UAAU,iBAAiBD,GAAG,QAAQD,KAAKZ,MAAMK,OACtD,yBAAKS,UAAU,mBAAmBD,GAAG,UAAUD,KAAKZ,MAAMM,QAC1D,yBAAKQ,UAAU,aACX,uBAAGA,UAAU,aAAaC,OAAO,SAASC,IAAI,sBAAsBC,KAAI,sFAAiFL,KAAKZ,MAAMK,MAA5F,aAAsGO,KAAKZ,MAAMM,QAAUO,GAAG,eAAtM,eAEA,4BAAQC,UAAU,YAAYD,GAAG,YAAYK,QAASN,KAAKjB,aAA3D,mB,GAlCIwB,IAAMC,WCsBfC,G,kMAlBX,IAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,OAAQ,EACfH,EAAOI,IAAM,kEACbH,SAASI,KAAKC,YAAYN,GAC1B,IAAMO,EAAcN,SAASC,cAAc,UAC3CF,EAAOI,IAAM,0EACbJ,EAAOG,OAAQ,EACfF,SAASI,KAAKC,YAAYC,K,+BAG1B,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,W,GAdUM,cCQEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASb,SAASc,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ec11577.chunk.js","sourcesContent":["import React from 'react'\n\nclass Container extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quote: 'If you can dream it, you can achieve it',\n            author: 'Zig Ziglar',\n            jsonData: null\n        }\n    }\n    async componentDidMount() {\n        const url = 'https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n        const response = await fetch(url)\n        const data = await response.json();\n        this.setState({\n            jsonData: data\n        })\n    }\n    handleClick = () => {\n        let randNum = Math.floor(Math.random() * (0 - this.state.jsonData.quotes.length) + this.state.jsonData.quotes.length)\n        this.setState({\n            quote: this.state.jsonData.quotes[randNum].quote,\n            author: this.state.jsonData.quotes[randNum].author,\n            loading: false\n        })\n\n    };\n    render() {\n        return (\n            <div id=\"quote-box\" className=\"Container\">\n                <div className=\"text-container\" id=\"text\">{this.state.quote}</div>\n                <div className='author-container' id=\"author\">{this.state.author}</div>\n                <div className=\"down-line\">\n                    <a className=\"tweet-link\" target=\"_blank\" rel=\"noopener noreferrer\" href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\"${this.state.quote}\" ${this.state.author}`} id='tweet-quote'>\n                    Tweet quote</a>\n                    <button className='quote-btn' id=\"new-quote\" onClick={this.handleClick}>New quote</button>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Container","import React, { Component } from 'react';\nimport Container from './components/Container.js'\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n    script.async = true;\n    script.src = 'https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js'\n    document.body.appendChild(script);\n    const QuoteScript = document.createElement(\"script\");\n    script.src = \"https://gist.github.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80.js\"\n    script.async = true;\n    document.body.appendChild(QuoteScript)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Container />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}